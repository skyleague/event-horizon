/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as HttpErrorValidator } from './schemas/http-error.schema.js'

/**
 * The default error error response for both 400 & 500 type errors
 */
export interface HttpError {
    /**
     * The status code of the response.
     */
    statusCode: number
    /**
     * A detailed message of the error.
     */
    message: string
}

export const HttpError = {
    validate: HttpErrorValidator as ValidateFunction<HttpError>,
    get schema() {
        return HttpError.validate.schema
    },
    get errors() {
        return HttpError.validate.errors ?? undefined
    },
    is: (o: unknown): o is HttpError => HttpError.validate(o) === true,
    parse: (o: unknown): { right: HttpError } | { left: DefinedError[] } => {
        if (HttpError.is(o)) {
            return { right: o }
        }
        return { left: (HttpError.errors ?? []) as DefinedError[] }
    },
} as const
