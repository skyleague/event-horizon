/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as APIGatewayEventRequestContextValidator } from './schemas/api-gateway-event-request-context.schema.js'
import { validate as APIGatewayProxyEventSchemaValidator } from './schemas/api-gateway-proxy-event-schema.schema.js'

export interface APIGatewayCert {
    clientCertPem: string
    subjectDN: string
    issuerDN: string
    serialNumber: string
    validity: {
        notBefore: string
        notAfter: string
    }
}

export interface APIGatewayEventIdentity {
    accessKey?: string | null | undefined
    accountId?: string | null | undefined
    apiKey?: string | null | undefined
    apiKeyId?: string | null | undefined
    caller?: string | null | undefined
    cognitoAuthenticationProvider?: string | null | undefined
    cognitoAuthenticationType?: string | null | undefined
    cognitoIdentityId?: string | null | undefined
    cognitoIdentityPoolId?: string | null | undefined
    principalOrgId?: string | null | undefined
    sourceIp?: (string | 'test-invoke-source-ip') | undefined
    user?: string | null | undefined
    userAgent?: string | null | undefined
    userArn?: string | null | undefined
    clientCert?: APIGatewayCert | null | undefined
}

export interface APIGatewayEventRequestContext {
    accountId: string
    apiId: string
    authorizer?:
        | {
              claims?:
                  | {
                        [k: string]: unknown
                    }
                  | null
                  | undefined
              scopes?: string[] | null | undefined
          }
        | null
        | undefined
    stage: string
    protocol: string
    identity: APIGatewayEventIdentity
    requestId: string
    requestTime: string
    requestTimeEpoch: number
    resourceId?: string | null | undefined
    resourcePath: string
    domainName?: string | null | undefined
    domainPrefix?: string | null | undefined
    extendedRequestId?: string | null | undefined
    httpMethod: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS'
    path: string
    connectedAt?: number | null | undefined
    connectionId?: string | null | undefined
    eventType?: 'CONNECT' | 'MESSAGE' | 'DISCONNECT' | null | undefined
    messageDirection?: string | null | undefined
    messageId?: string | null | undefined
    routeKey?: string | null | undefined
    operationName?: string | null | undefined
}

export const APIGatewayEventRequestContext = {
    validate: APIGatewayEventRequestContextValidator as ValidateFunction<APIGatewayEventRequestContext>,
    get schema() {
        return APIGatewayEventRequestContext.validate.schema
    },
    get errors() {
        return APIGatewayEventRequestContext.validate.errors ?? undefined
    },
    is: (o: unknown): o is APIGatewayEventRequestContext => APIGatewayEventRequestContext.validate(o) === true,
    parse: (o: unknown): { right: APIGatewayEventRequestContext } | { left: DefinedError[] } => {
        if (APIGatewayEventRequestContext.is(o)) {
            return { right: o }
        }
        return { left: (APIGatewayEventRequestContext.errors ?? []) as DefinedError[] }
    },
} as const

export interface APIGatewayProxyEventSchema {
    version?: string | undefined
    authorizationToken?: string | undefined
    identitySource?: string | undefined
    methodArn?: string | undefined
    type?: 'TOKEN' | 'REQUEST' | undefined
    resource: string
    path: string
    httpMethod: 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'HEAD' | 'OPTIONS'
    headers?:
        | {
              [k: string]: string | undefined
          }
        | undefined
    queryStringParameters: {
        [k: string]: string | undefined
    } | null
    multiValueHeaders?:
        | {
              [k: string]: string[] | undefined
          }
        | undefined
    multiValueQueryStringParameters: {
        [k: string]: string[] | undefined
    } | null
    requestContext: APIGatewayEventRequestContext
    pathParameters?:
        | {
              [k: string]: string | undefined
          }
        | null
        | undefined
    stageVariables?:
        | {
              [k: string]: string | undefined
          }
        | null
        | undefined
    isBase64Encoded?: boolean | undefined
    body: string | null
}

export const APIGatewayProxyEventSchema = {
    validate: APIGatewayProxyEventSchemaValidator as ValidateFunction<APIGatewayProxyEventSchema>,
    get schema() {
        return APIGatewayProxyEventSchema.validate.schema
    },
    get errors() {
        return APIGatewayProxyEventSchema.validate.errors ?? undefined
    },
    is: (o: unknown): o is APIGatewayProxyEventSchema => APIGatewayProxyEventSchema.validate(o) === true,
    parse: (o: unknown): { right: APIGatewayProxyEventSchema } | { left: DefinedError[] } => {
        if (APIGatewayProxyEventSchema.is(o)) {
            return { right: o }
        }
        return { left: (APIGatewayProxyEventSchema.errors ?? []) as DefinedError[] }
    },
} as const
