/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */
import AjvValidator from 'ajv'
import type { ValidateFunction } from 'ajv'

export interface KinesisStreamEvent {
    Records: KinesisStreamRecord[]
}

export const KinesisStreamEvent = {
    validate: (await import('./schemas/kinesis-stream-event.schema.js'))
        .validate10 as unknown as ValidateFunction<KinesisStreamEvent>,
    get schema() {
        return KinesisStreamEvent.validate.schema
    },
    get errors() {
        return KinesisStreamEvent.validate.errors ?? undefined
    },
    is: (o: unknown): o is KinesisStreamEvent => KinesisStreamEvent.validate(o) === true,
    assert: (o: unknown) => {
        if (!KinesisStreamEvent.validate(o)) {
            throw new AjvValidator.ValidationError(KinesisStreamEvent.errors ?? [])
        }
    },
} as const

export interface KinesisStreamRecord {
    awsRegion: string
    eventID: string
    eventName: string
    eventSource: string
    eventSourceARN: string
    eventVersion: string
    invokeIdentityArn: string
    kinesis: KinesisStreamRecordPayload
}

export const KinesisStreamRecord = {
    validate: (await import('./schemas/kinesis-stream-record.schema.js'))
        .validate10 as unknown as ValidateFunction<KinesisStreamRecord>,
    get schema() {
        return KinesisStreamRecord.validate.schema
    },
    get errors() {
        return KinesisStreamRecord.validate.errors ?? undefined
    },
    is: (o: unknown): o is KinesisStreamRecord => KinesisStreamRecord.validate(o) === true,
    assert: (o: unknown) => {
        if (!KinesisStreamRecord.validate(o)) {
            throw new AjvValidator.ValidationError(KinesisStreamRecord.errors ?? [])
        }
    },
} as const

export interface KinesisStreamRecordPayload {
    approximateArrivalTimestamp: number
    data: string
    kinesisSchemaVersion: string
    partitionKey: string
    sequenceNumber: string
}
