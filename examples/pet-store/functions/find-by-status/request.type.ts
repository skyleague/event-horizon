/**
 * Generated by @skyleague/therefore@v1.0.0-local
 * Do not manually touch this
 */
/* eslint-disable */

import type { Status } from '../../lib/models.type.js'

import type { DefinedError, ValidateFunction } from 'ajv'

import { validate as QueryValidator } from './schemas/query.schema.js'

export interface Query {
    status: Status
}

export const Query = {
    validate: QueryValidator as ValidateFunction<Query>,
    get schema() {
        return Query.validate.schema
    },
    get errors() {
        return Query.validate.errors ?? undefined
    },
    is: (o: unknown): o is Query => Query.validate(o) === true,
    parse: (o: unknown): { right: Query } | { left: DefinedError[] } => {
        if (Query.is(o)) {
            return { right: o }
        }
        return { left: (Query.errors ?? []) as DefinedError[] }
    },
} as const
